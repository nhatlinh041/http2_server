#pragma once

#include <iostream>
#include <sstream>
#include <mutex>
#include <cstring>

enum class LogLevel { Debug = 0, Info = 1, Warn = 2, Error = 3 };

// === GENERATED BY CLAUDE AI ===
class Logger {
public:
    static Logger& instance() {
        static Logger instance;
        return instance;
    }
    
    void set_level(LogLevel level) { level_ = level; }
    
    void log(LogLevel level, const char* file, int line, const std::string& message) {
        if (level < level_) return;
        
        std::lock_guard<std::mutex> lock(mutex_);
        std::cout << "[" << level_string(level) << "] " 
                  << basename(file) << ":" << line << " - " 
                  << message << std::endl;
    }

private:
    LogLevel level_ = LogLevel::Info;
    std::mutex mutex_;
    
    const char* level_string(LogLevel level) const {
        switch (level) {
            case LogLevel::Debug: return "DEBUG";
            case LogLevel::Info:  return "INFO ";
            case LogLevel::Warn:  return "WARN ";
            case LogLevel::Error: return "ERROR";
            default: return "?????";
        }
    }
    
    const char* basename(const char* filepath) const {
        const char* base = strrchr(filepath, '/');
        return base ? base + 1 : filepath;
    }
};

#define LOG_DEBUG(msg) do { std::ostringstream oss; oss << msg; Logger::instance().log(LogLevel::Debug, __FILE__, __LINE__, oss.str()); } while(0)
#define LOG_INFO(msg) do { std::ostringstream oss; oss << msg; Logger::instance().log(LogLevel::Info, __FILE__, __LINE__, oss.str()); } while(0)
#define LOG_WARN(msg) do { std::ostringstream oss; oss << msg; Logger::instance().log(LogLevel::Warn, __FILE__, __LINE__, oss.str()); } while(0)
#define LOG_ERROR(msg) do { std::ostringstream oss; oss << msg; Logger::instance().log(LogLevel::Error, __FILE__, __LINE__, oss.str()); } while(0)